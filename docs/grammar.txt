# {..} : 0 or more
# [..] : 0 or 1
# a* : 0 or more a
# a? : 0 or 1 a
# a | b : a or b

File = ['module' Name ';'] Include* TopLevel*
Name = IDENT ['.' Name]
EOS = ';' | EOF

Include = 'Include' STRING EOS
TopLevel = Directive* Visibility? Directive* [Import | Decl] EOS
Visibility = 'pub' | 'priv' 
Directive = '@' IDENT
Import = 'import' ModName ['as' IDENT]
Decl = ValDecl | FuncDecl | StructDecl
ValDecl = ('const' | 'val' | 'var') IDENT (Type | (Type? '=' Expr))
FuncDecl = 'fun' ['[' IDENT ']'] IDENT FuncSignature Block?
StructDecl = 'struct' IDENT Struct 

Field = (['val' | 'var'] (IDENT | '_'))? Type
Struct= '{' {Field ';'} '}'
FuncSignature = '(' [Field {',' Field} ','?] ')' Type?

Type = NestedType | PointerType | ArrayType | FuncType | Name
NestedType = '(' Type ')'
PointerType = '&' ['val' | 'var'] Type
ArrayType = '[' Type [INTEGER ':'] ']'
FuncType 'fun' ['[' IDENT ']'] FuncSignature

Block = '{' Stmt* '}'
Stmt = [Block | ValDecl | AssignOrExprStmt | 'if' IfStmt | WhileStmt |
        ForStmt | ReturnStmt | 'break' | 'continue'] EOS
ExprOrAssignStmt = Expr ['++' | '--' | (('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) Expr)]
IfStmt = Condition Block [('elif' IfStmt) | ('else' Block)]
WhileStmt = 'while' Condition Block
ForStmt 'for' [IDENT Type? '=' Expr] ';' Condition? ';' ExprOrAssignStmt? Block
ReturnStmt = 'return' [Expr]

Condition = UnaryOp? Operand Primary AsExpr [BinaryOp Condition]
Expr = UnaryOp? (Operand | StructLit) Primary AsExpr [BinaryOp Expr]
BinaryOp = '||' | '&&' | '!=' | '==' | '>' | '>=' | '<' | '<='
                | '-' | '+' | '/' | '%' | '*'
UnaryOp = ('!' | '-' | '*') | ('&' ['val' | 'var']) 
AsExpr = ['as' Type]
Operand = NestedExpr | LenExpr | SizeExpr | Name | BasicLit | ArrayLit | FuncLit
NestedExpr = '(' Expr ')'
LenExpr = 'len' '(' Expr ')'
SizeExpr = 'sizeof' '(' Type ')'

ArgExpr = [IDENT ':'] Expr
ArgumentList = [ArgExpr {',' ArgExpr} ','?]

Primary = [SliceExpr | IndexExpr | FuncCall | DotExpr]
SliceExpr = '[' Expr? ':' Expr? ']'
IndexExpr = '[' Expr ']' Primary
FuncCall = '(' ArgumentList )' Primary
DotExpr = '.' IDENT Primary

BasicLit = Number | CHAR | (Name? STRING) | 'true' | 'false' | 'null'
Number = (INTEGER | FLOAT) Name?
StructLit = Name '{' ArgumentList '}'
ArrayLit  = '[' [Expr {',' Expr} ','?] ']'
FuncLit = 'fun' ['[' IDENT ']'] FuncSignature Block

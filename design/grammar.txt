# {..} : 0 or more
# (..)*  : 0 or more
# [..] : optional
# ?: optional
# a | b : a or b

File = ['module' IDENT ';'] Include* TopDecl*

Include = 'include' STRING ';'
TopDecl = Visibility? Decl ';'
Decl = ValDecl | FuncDecl | StructDecl
ValDecl = ('val' | 'var') IDENT (TypeSpec | (TypeSpec? '=' Expr))
FuncDecl = 'func' IDENT Func
StructDecl = 'struct' IDENT Struct

Visibility = 'pub' | 'priv' 
TypeSpec = PointerType | ArrayType | IDENT
PointerType = '*' ['val' | 'var'] TypeSpec
ArrayType = '[' INTEGER? ':' TypeSpec ']'
Field = ['val' | 'var'] IDENT TypeSpec
Struct= '{' {Field ';'} '}'
FuncSignature = '(' [Field {',' Field} ','?] ')' TypeSpec?
Func = FuncSignature (Block | ';')

Block = '{' Stmt* '}'
Stmt = [Block | ValDecl | Expr | AssignStmt | 'if' IfStmt | WhileStmt |
        ForStmt | ReturnStmt | 'break' | 'continue'] ';'
AssignStmt = Expr ('++' | '--' | ('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) Expr)
IfStmt = Condition Block [('elif' IfStmt) | ('else' Block)]
WhileStmt = 'while' Condition Block
ForStmt 'for' [IDENT TypeSpec? '=' Expr] ';' Condition? ';' [AssignStmt | Expr] Block
ReturnStmt = 'return' [Expr]

Condition = BinaryExpr
Expr = BinaryExpr
BinaryExpr = UnaryExpr [BinaryOp BinaryExpr]
BinaryOp = '||' | '&&' | '!=' | '==' | '>' | '>=' | '<' | '<='
                | '-' | '+' | '/' | '%' | '*'
UnaryExpr = [('!' | '-' | '*') | ('&' ['val' | 'var'])] Operand
Operand = (CastExpr | IDENT | Literal | '(' Expr ')') Primary
CastExpr = 'cast' '(' TypeSpec ',' Expr ')'

Primary = [SliceExpr | IndexExpr | FuncCall | DotExpr]
SliceExpr = '[' Expr? ':' Expr? ']'
IndexExpr = '[' Expr ']' Primary
FuncCall = '(' [Expr {',' Expr} ','?] ')' Primary
DotExpr = '.' IDENT Primary

# StructLit is ignored when parsing Condition
Literal = BasicLit | StructLit | ArrayLit
BasicLit = Number | ('c'? STRING) | 'true' | 'false' | 'null'
Number = INTEGER | FLOAT
KeyValue = IDENT '=' Expr
StructLit = IDENT '{' [KeyValue {',' KeyValue} ','?] '}'
ArrayLit  = '[' [Expr {',' Expr} ','?] ']'
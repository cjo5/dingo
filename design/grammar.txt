# {..} : 0 or more
# (..)*  : 0 or more
# [..] : optional
# a | b : a or b

File = ['module' IDENT ';'] Include* TopDecl*

Include = 'include' STRING ';'
TopDecl = [Visibility] Decl ';'
Decl = ValDecl | FuncDecl | StructDecl
ValDecl = ('val' | 'var') IDENT (Type | ([Type] '=' Expr))
FuncDecl = 'func' IDENT Func
StructDecl = 'struct' IDENT Struct

Visibility = 'pub' | 'priv' 
Type = ['*'] IDENT 
Field = ['val' | 'var'] IDENT Type
Struct= '{' {Field ';'} '}'
FuncSignature = '(' [Field {',' Field}] [','] ')' [ Type]
Func = FuncSignature (Block | ';')

Block = '{' Stmt* '}'
Stmt = [Block | ValDecl | Expr | AssignStmt | 'if' IfStmt | WhileStmt 
        | ReturnStmt | 'break' | 'continue'] ';'
AssignStmt = Expr ('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) Expr
IfStmt = Condition Block [('elif' IfStmt) | ('else' Block)]
WhileStmt = 'while' Condition Block
ReturnStmt = 'return' [Expr]

Expr = LogicalOr 
Condition = LogicalOr
LogicalOr = LogicalAnd {'||' LogicalAnd}
LogicalAnd = Equality {'&&' Equality}
Equality = Comparison {( '!=' | '==' ) Comparison}
Comparison = Term {( '>' | '>=' | '<' | '<=' ) Term}
Term = Factor {( '-' | '+' ) Factor}
Factor = Unary {( '/' | '%' | '*' ) Unary}
Unary = (( '!' | '-' | '&') Expr) | Operand
# StructLit is not an operand when parsing condition
Operand = StarExpr | Cast | Primary | BasicLit | StructLit

StarExpr = '*' Expr
Cast = 'cast' '(' Expr ',' Expr ')'
Primary = IDENT | DotIdent | FuncCall  | '(' Expr ')'
FuncCall = Primary '(' [Expr {',' Expr} [','] ] ')'
DotIdent = Primary '.' IDENT

BasicLit = INTEGER | FLOAT | STRING | 'true' | 'false' | 'null'
KeyValue = IDENT '=' Expr
StructLit = Type '{' [KeyValue {',' KeyValue} [',] ] '}'
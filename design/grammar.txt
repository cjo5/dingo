# {..} : 0 or more
# (..)*  : 0 or more
# [..] : optional
# ?: optional
# a | b : a or b

File = ['module' IDENT ';'] Include* TopDecl*

Include = 'include' STRING ';'
TopDecl = [Visibility] Decl ';'
Decl = ValDecl | FuncDecl | StructDecl
ValDecl = ('val' | 'var') IDENT (Type | ([Type] '=' Expr))
FuncDecl = 'func' IDENT Func
StructDecl = 'struct' IDENT Struct

Visibility = 'pub' | 'priv' 
Type = PointerType | ArrayType | IDENT
PointerType = '*' Type
ArrayType = '[' INTEGER? ']' Type
Field = ['val' | 'var'] IDENT Type
Struct= '{' {Field ';'} '}'
FuncSignature = '(' [Field {',' Field} ','?] ')' Type?
Func = FuncSignature (Block | ';')

Block = '{' Stmt* '}'
Stmt = [Block | ValDecl | Expr | AssignStmt | 'if' IfStmt | WhileStmt |
        ForStmt | ReturnStmt | 'break' | 'continue'] ';'
AssignStmt = Expr ('++' | '--' | ('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) Expr)
IfStmt = Condition Block [('elif' IfStmt) | ('else' Block)]
WhileStmt = 'while' Condition Block
ForStmt 'for' [IDENT Type? '=' Expr] ';' Condition? ';' [AssignStmt | Expr] Block
ReturnStmt = 'return' [Expr]

Expr = LogicalOr 
Condition = LogicalOr
LogicalOr = LogicalAnd {'||' LogicalAnd}
LogicalAnd = Equality {'&&' Equality}
Equality = Comparison {( '!=' | '==' ) Comparison}
Comparison = Term {( '>' | '>=' | '<' | '<=' ) Term}
Term = Factor {( '-' | '+' ) Factor}
Factor = Unary {( '/' | '%' | '*' ) Unary}
Unary = (( '!' | '-' | '&' | '*') Expr) | Operand
# StructLit is ignored when parsing Condition
Operand = CastExpr | Primary | BasicLit | StructLit | ArrayLit

CastExpr = 'cast' '(' Expr ',' Expr ')'
Primary = IDENT | IndexExpr | FuncCall | DotExpr | '(' Expr ')'
IndexExpr = Primary '[' INTEGER? (':' | ':' INTEGER)?  ']'
FuncCall = Primary '(' [Expr {',' Expr} ','?] ')'
DotExpr = Primary '.' IDENT

BasicLit = INTEGER | FLOAT | STRING | 'true' | 'false' | 'null'
KeyValue = IDENT '=' Expr
StructLit = IDENT '{' [KeyValue {',' KeyValue} ','?] '}'
ArrayLit  = '[' [Expr {',' Expr} ','?] ']'
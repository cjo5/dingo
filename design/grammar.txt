# {..} : 0 or more
# (..)*  : 0 or more
# [..] : optional
# ?: optional
# a | b : a or b

File = ['module' IDENT ';'] Include* TopDecl*

Include = 'include' STRING ';'
TopDecl = [Visibility] Decl ';'
Decl = ValDecl | FuncDecl | StructDecl
ValDecl = ('val' | 'var') IDENT (TypeSpec | (TypeSpec? '=' Expr))
FuncDecl = 'func' IDENT Func
StructDecl = 'struct' IDENT Struct

Visibility = 'pub' | 'priv' 
TypeSpec = PointerType | ArrayType | IDENT
PointerType = '*' ['val' | 'var'] TypeSpec
ArrayType = '[' INTEGER? ']' TypeSpec
Field = ['val' | 'var'] IDENT TypeSpec
Struct= '{' {Field ';'} '}'
FuncSignature = '(' [Field {',' Field} ','?] ')' TypeSpec?
Func = FuncSignature (Block | ';')

Block = '{' Stmt* '}'
Stmt = [Block | ValDecl | Expr | AssignStmt | 'if' IfStmt | WhileStmt |
        ForStmt | ReturnStmt | 'break' | 'continue'] ';'
AssignStmt = Expr ('++' | '--' | ('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) Expr)
IfStmt = Condition Block [('elif' IfStmt) | ('else' Block)]
WhileStmt = 'while' Condition Block
ForStmt 'for' [IDENT TypeSpec? '=' Expr] ';' Condition? ';' [AssignStmt | Expr] Block
ReturnStmt = 'return' [Expr]

Expr = LogicalOr 
Condition = LogicalOr
LogicalOr = LogicalAnd {'||' LogicalAnd}
LogicalAnd = Equality {'&&' Equality}
Equality = Comparison {( '!=' | '==' ) Comparison}
Comparison = Term {( '>' | '>=' | '<' | '<=' ) Term}
Term = Factor {( '-' | '+' ) Factor}
Factor = Unary {( '/' | '%' | '*' ) Unary}
Unary = (( '!' | '-') Expr) | Operand

# StructLit is ignored when parsing Condition
Operand = CastExpr | AddressExpr | DerefExpr | Literal | InitPrimary
CastExpr = 'cast' '(' TypeSpec ',' Expr ')'
AddressExpr = '&' ['val' | 'var'] Expr
DerefExpr = '*' Expr

InitPrimary = (IDENT | '(' Expr ')') Primary
Primary = [SliceExpr | IndexExpr | FuncCall | DotExpr]
SliceExpr = '[' Expr? ':' Expr? ']'
IndexExpr = '[' Expr ']' Primary
FuncCall = '(' [Expr {',' Expr} ','?] ')' Primary
DotExpr = '.' IDENT Primary

Literal = BasicLit | StructLit | ArrayLit
BasicLit = INTEGER | FLOAT | STRING | 'true' | 'false' | 'null'
KeyValue = IDENT '=' Expr
StructLit = IDENT '{' [KeyValue {',' KeyValue} ','?] '}'
ArrayLit  = '[' [Expr {',' Expr} ','?] ']'
TODO (in no particular order):
- LLVM
    - Research on alignment
    - Debug symbols
    - Fix scoping rules
- Memory management and arrays
    - Array syntax:
        - static array: val a [u32; 5]
        - initialize array [0..9;2], [9..0;-1]
        - immutable members: val a [val u32; 5]
        - slices:
            - val a [u32];
            - a[0:32]; lower bound included, upper bound excluded
            - a[:]; convert to slice
            - a[3:]; index 3 and onwards
            - a[:9]; index 0 to 8
            - a[:3]; 0 to length - 3
        - inference: val a = [1, 2, 3, 4, 5];
    - Non nullable pointers 
    - Explicit pointer semantics. move, share etc.
- sizeof operator
- Dedicated size type (size_t in C)
- Change pointer type syntax to & instead of *
- Remove type check errors if type is untyped; this means an error should already have been reported.
- for loops
    * for i u32 = 0; i < 5; i++ {}
    - for i in [0..9] {}
    - for x in a {}; iterate a slice / array
    - for x* in a{}; iterate a slice / array with pointer to element
    - for i, x in a {};; iterate a slice / array with index
- Improve error messages
    - Start messages with capital letter
    - Show region of source code where error happened (e.g. line + 1 above and 1 below)
    - Unique error code
- Add tests
    - Go tests
    - Dingo tests
- Change struct initialization
    - With keys foo{a: 2}
    - Without keys foo{2}
- Integer suffixes: 1u8, 1u16, 1u32, 1f32, 1f64 etc.
- Module system
    - Use modules
        - use a, use a.b etc
    - Fix dotted module names: a.b.c etc
    - Name mangling
    - C linkage
    - Specify mappings between module names and paths
    - Apply visibility modifier to multiple vars/functions by using () (same as Go)
    - Declarations are private by default
    - Modules can be declared multiple times.
- Const types?
- Bit operations
- Change printtree output format and write to file instead of stdout
- Invalidate keyword? Any use after an identifier has been invalidated will cause an error.
- C lib
    - Separate primitive types for C
- Nested functions
- Refactor semantics package. The use of AST, symbol and type is very confusing right now.
    - Remove Node from Symbol struct
        - This will require a new way to handle decl dependencies (use map instead?)
- Add methods
- Add characters
- Add anonymous functions
- Add anonymous structs
- Add enums
- Only allow subset of features when writing C/C++ module
- Generics
- Idiomatic error handling
- Ad hoc polymorphism 
- Operator overloading?
- Type alias
- Macros / preprocessor
    - Conditional compilation
- Make it easier to merge tokens
- Default function arguments + keyed arguments
- Parse escape sequences in string literal
- Rewrite expression grammar and parser to something simpler
- Trailing commas 

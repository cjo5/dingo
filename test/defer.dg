include "common.dg"

fun test_nested_scopes() {
    {
        println("nested_scopes_start1")
        defer println("nested_scopes_end1")
        {
            println("nested_scopes_start2")
            defer println("nested_scopes_end2")
        }
    }
    println("nested_scopes_done")
}

fun test_if1(a: i32) {
    defer println("if1_done")
    if a == 1 {
        defer println("if1_1")
        return
    }
    defer println("if1_2")
}

fun test_if2(a: i32) i32 {
    defer println("if2_done")
    if a == 1 {
        defer println("if2_1")
        return 1
    } else {
        defer println("if2_2")
        return 3
    }
}

fun test_if3(a: i32) {
    if a == 1 {
        defer println("if3_1_end")
        println("if3_1_start")
    } elif a == 2 {
        defer println("if3_2_end")
        println("if3_2_start")
    } else {
        defer println("if3_3_end")
        println("if3_3_start")
    }
    println("if3_done")
}

fun test_for(a: i32) {
    defer println("for_done2")
    for i = 0; i < 3; i++ {
        defer println("for")
        if i == 1 {
            if a == 1 {
                continue
            } elif a == 2 {
                break
            } elif a == 3 {
                return
            }
        }
        printiln(i)
    }
    println("for_done1")
}

fun test_nested_for() {
    defer println("nested_for_done")
    for i = 0; i < 2; i++ {
        for j = 0; j < 2; j++ {
            defer printiln(i)
            if j == 0 {
                break
            }
        }
    }
}

fun test_for_chain(a: i32) {
    defer println("for_chain_done")
    for i = 0; i < 2; i++ {
        defer println("for_chain_it1")
        {
            defer println("for_chain_it2")
            if a == 1 {
                continue
            } elif a == 2 {
                defer println("for_chain_break")
                break
            } else {
                defer println("for_chain_fallthrough")
            }
        } 
    }
}

fun test_for_skip(a: i32) {
    for i = 0; i < 1; i++ {
        defer println("for_skip_done")
        if a == 1 {
            continue
        } elif a == 2 {
            break
        }
        defer println("skip")
    }
}

fun test_return_skip(a: i32) {
    defer println("return_skip_done")
    {
        if a == 1 {
            return
        }
        defer println("skip")
    }
}

fun test_modify_retval() i32 {
    var a = 4
    defer a = 5
    return a
}

extern fun main() c_int {
    test_nested_scopes()
    // expect: nested_scopes_start1
    // expect: nested_scopes_start2
    // expect: nested_scopes_end2
    // expect: nested_scopes_end1
    // expect: nested_scopes_done

    test_if1(1)
    // expect: if1_1
    // expect: if1_done

    test_if1(2)
    // expect: if1_2
    // expect: if1_done

    test_if2(1)
    // expect: if2_1
    // expect: if2_done

    test_if2(2)
    // expect: if2_2
    // expect: if2_done

    test_if3(1)
    // expect: if3_1_start
    // expect: if3_1_end
    // expect: if3_done

    test_if3(2)
    // expect: if3_2_start
    // expect: if3_2_end
    // expect: if3_done

    test_if3(3)
    // expect: if3_3_start
    // expect: if3_3_end
    // expect: if3_done

    test_for(1)
    // expect: 0
    // expect: for
    // expect: for
    // expect: 2
    // expect: for
    // expect: for_done1
    // expect: for_done2

    test_for(2)
    // expect: 0
    // expect: for
    // expect: for
    // expect: for_done1
    // expect: for_done2

    test_for(3)
    // expect: 0
    // expect: for
    // expect: for
    // expect: for_done2

    test_nested_for()
    // expect: 0
    // expect: 1
    // expect: nested_for_done

    test_for_chain(1)
    // expect: for_chain_it2
    // expect: for_chain_it1
    // expect: for_chain_it2
    // expect: for_chain_it1
    // expect: for_chain_done

    test_for_chain(2)
    // expect: for_chain_break
    // expect: for_chain_it2
    // expect: for_chain_it1
    // expect: for_chain_done

    test_for_chain(3)
    // expect: for_chain_fallthrough
    // expect: for_chain_it2
    // expect: for_chain_it1
    // expect: for_chain_fallthrough
    // expect: for_chain_it2
    // expect: for_chain_it1
    // expect: for_chain_done

    test_for_skip(1) // expect: for_skip_done
    test_for_skip(2) // expect: for_skip_done

    test_return_skip(1) // expect: return_skip_done

    printiln(test_modify_retval()) // expect: 4

    return 0
}
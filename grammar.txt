# {..} : 0 or more
# (..)*  : 0 or more
# [..] : optional

Module = ['module'] Import* TopLevelDecl*

Import = 'import' STRING
TopLevelDecl = [Visibility] Decl
Decl = VarDecl | FuncDecl | StructDecl
VarDecl = ('val' | 'var') IDENT ':' Type ['=' Expr] ';'
FuncDecl = 'func' IDENT Function
StructDecl = 'struct' IDENT Struct

Visibility = 'ext' | 'int' | 'rst'
Type = IDENT  | AnonStructType | FunctionType
Field =  ['val' | 'var'] [IDENT ':'] Type
FieldList = Field {',' Field} [',]
StructField = [Visibility] ['static' | 'val' | 'var'] IDENT ':' Type ['=' Expr]
Struct= '{' [StructField {',' StructField} [',']]'}'
AnonStructType = '{' [FieldList] '}'
FunctionField = ['val' | 'var'] IDENT ':' Type
FunctionSignature = '(' [FunctionField {',' FunctionField} [',']] ')' ['->' Type]
Function = FuncSignature Block
FunctionType = '(' [FieldList] ')' ['->' Type]

Block = '{' Stmt* '}'
Stmt = Block | VarDeclStmt | PrintStmt | AssignStmt | CallStmt | 'if' IfStmt | WhileStmt 
        | ReturnStmt | 'break' ';' | 'continue' ';'
VarDeclStmt = VarDecl ';'
PrintStmt = 'print' Expr ';'
AssignStmt = IDENT ('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) Initializer ';'
ExprStmt = Expr ';'
IfStmt = Expr BlockStmt [('elif' IfStmt) | ('else' Block)]
WhileStmt = 'while' '{' Stmt* '}'
ReturnStmt = 'return' [Expr] ';'

Expr = LogicalOr | StructLiteral | FunctionLiteral
LogicalOr = LogicalAnd {'||' LogicalAnd}
LogicalAnd = Equality {'&&' Equality}
Equality = Comparison {( '!=' | '==' ) Comparison}
Comparison = Term {( '>' | '>=' | '<' | '<=' ) Term}
Term = Factor {( '-' | '+' ) Factor}
Factor = Unary {( '/' | '%' | '*' ) Unary}
Unary = ( '!' | '-' ) Unary | Primary
Primary = INTEGER | FLOAT | STRING | IDENT | FuncCall | DotExpr | 'false' | 'true' | '(' Expr ')'
FuncCall = IDENT '(' [IDENT {',' IDENT} ] ')'
DotExpr = IDENT '.' (FuncCall | IDENT);

KeyValue = IDENT '=' Initializer
StructLiteral = IDENT '{' [KeyValue {',' KeyValue} [',]] '}'
FunctionLiteral = 'func' Function
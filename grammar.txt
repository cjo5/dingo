# {..} : 0 or more
# [..] : 0 or 1
# a* : 0 or more a
# a? : 0 or 1 a
# a | b : a or b

File = ['module' ModName ';'] Require* TopDecl*

ModName = IDENT | DotExpr
Require = 'require' STRING ';'
TopDecl = Directive* Visibility? Directive* (Import | Decl) ';'
Visibility = 'pub' | 'priv' 
Directive = '@' IDENT
Import = 'import' ModName ';'
Decl = ValDecl | FuncDecl | StructDecl
ValDecl = ('val' | 'var') IDENT (Type | (Type? '=' Expr))
FuncDecl = 'fun' ['[' IDENT ']'] IDENT FuncSignature (Block | ';')
StructDecl = 'struct' IDENT Struct

Field = (['val' | 'var'] (IDENT | '_'))? Type
Struct= '{' {Field ';'} '}'
FuncSignature = '(' [Field {',' Field} ','?] ')' Type?

Type = PointerType | ArrayType | FuncType | IDENT | '(' Type ')'
PointerType = '*' ['val' | 'var'] Type
ArrayType = '[' INTEGER? ':' Type ']'
FuncType 'fun' ['[' IDENT ']'] FuncSignature

Block = '{' Stmt* '}'
Stmt = [Block | ValDecl | Expr | AssignStmt | 'if' IfStmt | WhileStmt |
        ForStmt | ReturnStmt | 'break' | 'continue'] ';'
AssignStmt = Expr ('++' | '--' | (('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) Expr))
IfStmt = Condition Block [('elif' IfStmt) | ('else' Block)]
WhileStmt = 'while' Condition Block
ForStmt 'for' [IDENT Type? '=' Expr] ';' Condition? ';' [AssignStmt | Expr] Block
ReturnStmt = 'return' [Expr]

Condition = BinaryExpr
Expr = BinaryExpr
BinaryExpr = UnaryExpr [BinaryOp BinaryExpr]
BinaryOp = '||' | '&&' | '!=' | '==' | '>' | '>=' | '<' | '<='
                | '-' | '+' | '/' | '%' | '*'
UnaryExpr = [('!' | '-' | '*') | ('&' ['val' | 'var'])] Operand
Operand = (CastExpr | LenExpr | IDENT | Literal | '(' Expr ')') Primary
CastExpr = 'cast' '(' Type ',' Expr ')'
LenExpr = 'lenof' '(' Expr ')'

Primary = [SliceExpr | IndexExpr | FuncCall | DotExpr]
SliceExpr = '[' Expr? ':' Expr? ']'
IndexExpr = '[' Expr ']' Primary
FuncCall = '(' [Expr {',' Expr} ','?] ')' Primary
DotExpr = '.' IDENT Primary

# StructLit is ignored when parsing Condition
Literal = BasicLit | StructLit | ArrayLit | FuncLit
BasicLit = Number | (IDENT? STRING) | 'true' | 'false' | 'null'
Number = (INTEGER | FLOAT) IDENT?
KeyValue = IDENT '=' Expr
StructLit = IDENT '{' [KeyValue {',' KeyValue} ','?] '}'
ArrayLit  = '[' [Expr {',' Expr} ','?] ']'
FuncLit = 'fun' ['[' IDENT ']'] FuncSignature Block

# {..} : 0 or more
# (..)*  : 0 or more
# [..] : optional

Module = ['module' IDENT ';'] TopLevelDecl*

TopLevelDecl = Import | ([Visibility] Decl)
Import = 'import' STRING 
Decl = VarDecl | FuncDecl | StructDecl
VarDecl = ('val' | 'var') IDENT ':' Type ['=' Initializer] ';'
FuncDecl = 'fun' IDENT Function
StructDecl = 'struct' IDENT Struct

Visibility= 'ex' | 'in'
Type = IDENT  | AnonStructType | FunctionType
Field =  ['val' | 'var'] [IDENT ':'] Type
FieldList = Field {',' Field} [',]
StructField = [Visibility] ['static' | 'val' | 'var'] IDENT ':' Type ['=' Initializer]
Struct= '{' [StructField {',' StructField} [',']]'}'
AnonStructType = '{' [FieldList] '}'
FunctionField = ['val' | 'var'] IDENT ':' Type
FunctionSignature = '(' [FunctionField {',' FunctionField} [',']] ')' ['->' Type]
Function = FuncSignature Block
FunctionType = '(' [FieldList] ')' ['->' Type]

KeyValue = IDENT '=' Initializer
StructLiteral = IDENT '{' [KeyValue {',' KeyValue} [',]] '}'
FunctionLiteral = 'fun' Function
Initializer = StructLiteral | FuncLiteral | Expr

Block = '{' Stmt* '}'
Stmt = Block | VarDecl | PrintStmt | AssignStmt | CallStmt | 'if' IfStmt | WhileStmt 
        | ReturnStmt | 'break' ';' | 'continue' ';'
PrintStmt = 'print' Expr ';'
AssignStmt = IDENT ('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) Initializer ';'
ExprStmt = Expr ';'
IfStmt = Expr BlockStmt [('elif' IfStmt) | ('else' Block)]
WhileStmt = 'while' '{' Stmt* '}'
ReturnStmt = 'return' [Expr] ';'

Expr = LogicalOr
LogicalOr = LogicalAnd {'||' LogicalAnd}
LogicalAnd = Equality {'&&' Equality}
Equality = Comparison {( '!=' | '==' ) Comparison}
Comparison = Term {( '>' | '>=' | '<' | '<=' ) Term}
Term = Factor {( '-' | '+' ) Factor}
Factor = Unary {( '/' | '%' | '*' ) Unary}
Unary = ( '!' | '-' ) Unary | Primary
Primary = INTEGER | FLOAT | STRING | IDENT | FuncCall | DotExpr | 'false' | 'true' | '(' Expr ')'
FuncCall = IDENT '(' [IDENT {',' IDENT} ] ')'
DotExpr = IDENT '.' (FuncCall | IDENT);
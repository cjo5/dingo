# {..} : 0 or more
# (..)*  : 0 or more
# [..] : optional

module = ['module' IDENT ';'] decl*

decl = varDecl | funcDecl
varDecl = ('var' | 'val') IDENT ':' typeSpec ['=' expr] ';'
funcDecl = 'fun' IDENT '(' [field {',' field} ] ')' ['->' typeSpec] blockStmt

field = IDENT ':' IDENT

stmt = blockStmt | declStmt | printStmt | assignStmt | callStmt | ifStmt | whileStmt 
        | returnStmt | 'break' ';' | 'continue' ';'
declStmt = varDecl 
blockStmt = '{' stmt* '}'
printStmt = 'print' expr ';'
assignStmt = IDENT ('=' | '+=' | '-=' | '*=' | '/=' | '%=' ) expr ';'
callStmt = call ';'
ifStmt = 'if' expr blockStmt {'elif' expr blockStmt} ['else' blockStmt]
whileStmt = 'while' '{' stmt* '}'
returnStmt = 'return' [expr] ';'

expr = logicalOr
logicalOr = logicalAnd {'||' logicalAnd}
logicalAnd = equality {'&&' equality}
equality = comparison {( '!=' | '==' ) comparison}
comparison = term {( '>' | '>=' | '<' | '<=' ) term}
term = factor {( '-' | '+' ) factor}
factor = unary {( '/' | '%' | '*' ) unary}
unary = ( '!' | '-' ) unary | primary
primary = INTEGER | FLOAT | STRING | IDENT | call | 'false' | 'true' | '(' expr ')'
call = IDENT '(' [IDENT {',' IDENT} ] ')'
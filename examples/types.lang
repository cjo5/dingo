module main;

import "@std/math"
import "@mylib"
import "../math"

use math;

/*

Base types:
- Unsigned / signed 64, 32, 16 and 8 bit integers
- 64 and 32 bit reals
- bool
- function
- struct
- enum
- array

fun main() {

}

struct x {
    x: u32,
}

methods x {
    exp abs() -> bool {

    }
}

exp fun asd() {

}

false.u64()

val x: u64 = 99;
let y: u32 = 55;
let z: u32 = x.u32() * y;

u32.max
i32.min
u8.max

val x: str = ""
var x: str = ""
let x: str = ""

let z: []int = 5;

var x: str = ""

var x: u8
var x: s8


var y: s32;
y = s32(x);

var z: s32 = null;
z = y;



var y: s32 = as

var x: struct {
    v: s32
    w: 99
}  {v=5, w=99};

static methods x<T> {
    new()
}

 struct {
    v: s32 = 5,
    w: s32 = 9
};

struct {
    v: s32 = 99
    w: s32
} a;

struct<a*>(5)
u32(v)

methods x {
    fun max() -> i32 {

    }
}

methods x {
    max(a, b) -> a {

    }
}

methods x {
    export static max() {

    }
}

methods i32 {
    fun max() -> i32 { return 5000; }
    fun min() -> i32 { return 5000; }
}

methods i32 {
    exp string() -> str { return self}
}

val f: (s32, u64) -> i32 = fun (a: s32, b: s32) -> i32 {

};

var f2: (a: str, b: str) -> i32;

let f: {a: s32, b: s32} = struct {
    a = 9,
    b = 9
};

let f = fun (a, b) -> i32 {

};

*/